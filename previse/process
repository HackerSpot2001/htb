I scanned this box and found a website running on it.

goBuster gave me a lot of directories on the box.

Using burpsuite I examined the different links on the site,
and looked at the various pages that were being run on the 
site.

nav.php gave me access to links of pages that I could not 
initially enumerate. Clicking these links redirected me to
the login page however, so I used burpsuite to strip the
Location Headers.

By adding a Match and Replace Rule that Matched 'Location.*$'
with an empty entry I was able to bypass the redirect and
make a test user. This could have also been accomplished by
matching 30* with 200, turning the 301s into 200s. 

With the test user, I had access to the website and noticed 
there was a file storage page. The site was php so it was 
assumed there was some sort of databasing going on.

The file storage page had a backup of the website on it.
Naturally I downloaded it and examined the code. 
config.php had the user and pass to the sql database.
logs.php showed a sql injection vulnerability. 

$output = exec("/usr/bin/python /opt/scripts/log_process.py {$_POST['delim']}");

The above is the code in question that was identified. The 
use of the exec function along with a global post method 
means we could probably inject shellcode through the 
'delim' variable. 

By intercepting a download request from teh site in burp, 
I injected shellcode by passing the string as the delim var.

This gave me a shell that allowed me access to the sql 
database on the box. I took the hash from that database and 
cracked it. The pass let me ssh in and take user.

To elevate, I ran sudo -l to see what I could do as user in 
sudo. I was able to run one script:
/opt/scripts/access_backup.sh

catting this script showed me that it used date and gzip
without specified PATHs. This means I was able to modify 
$PATH and trick the computer. I made a new gzip that was 
just shellcode (see screenshot), and gave it +x. I then
altered PATH by using:
export PATH=`pwd`:$PATH
This added the current directory to the front of the PATH 
variable, meaning the computer would check it first when 
trying to run programs. The next time I ran the script given
to user, it ran my shellcode as and I was able to take root.


